/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { YfghjService } from "../yfghj.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { YfghjCreateInput } from "./YfghjCreateInput";
import { Yfghj } from "./Yfghj";
import { YfghjFindManyArgs } from "./YfghjFindManyArgs";
import { YfghjWhereUniqueInput } from "./YfghjWhereUniqueInput";
import { YfghjUpdateInput } from "./YfghjUpdateInput";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class YfghjControllerBase {
  constructor(
    protected readonly service: YfghjService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Yfghj })
  @nestAccessControl.UseRoles({
    resource: "Yfghj",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createYfghj(@common.Body() data: YfghjCreateInput): Promise<Yfghj> {
    return await this.service.createYfghj({
      data: data,
      select: {
        createdAt: true,
        ds: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Yfghj] })
  @ApiNestedQuery(YfghjFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Yfghj",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async yfghjs(@common.Req() request: Request): Promise<Yfghj[]> {
    const args = plainToClass(YfghjFindManyArgs, request.query);
    return this.service.yfghjs({
      ...args,
      select: {
        createdAt: true,
        ds: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Yfghj })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Yfghj",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async yfghj(
    @common.Param() params: YfghjWhereUniqueInput
  ): Promise<Yfghj | null> {
    const result = await this.service.yfghj({
      where: params,
      select: {
        createdAt: true,
        ds: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Yfghj })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Yfghj",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateYfghj(
    @common.Param() params: YfghjWhereUniqueInput,
    @common.Body() data: YfghjUpdateInput
  ): Promise<Yfghj | null> {
    try {
      return await this.service.updateYfghj({
        where: params,
        data: data,
        select: {
          createdAt: true,
          ds: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Yfghj })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Yfghj",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteYfghj(
    @common.Param() params: YfghjWhereUniqueInput
  ): Promise<Yfghj | null> {
    try {
      return await this.service.deleteYfghj({
        where: params,
        select: {
          createdAt: true,
          ds: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/myUser")
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findMyUser(
    @common.Req() request: Request,
    @common.Param() params: YfghjWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findMyUser(params.id, {
      ...query,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,

        yfghjs: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/myUser")
  @nestAccessControl.UseRoles({
    resource: "Yfghj",
    action: "update",
    possession: "any",
  })
  async connectMyUser(
    @common.Param() params: YfghjWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      myUser: {
        connect: body,
      },
    };
    await this.service.updateYfghj({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/myUser")
  @nestAccessControl.UseRoles({
    resource: "Yfghj",
    action: "update",
    possession: "any",
  })
  async updateMyUser(
    @common.Param() params: YfghjWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      myUser: {
        set: body,
      },
    };
    await this.service.updateYfghj({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/myUser")
  @nestAccessControl.UseRoles({
    resource: "Yfghj",
    action: "update",
    possession: "any",
  })
  async disconnectMyUser(
    @common.Param() params: YfghjWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      myUser: {
        disconnect: body,
      },
    };
    await this.service.updateYfghj({
      where: params,
      data,
      select: { id: true },
    });
  }
}
